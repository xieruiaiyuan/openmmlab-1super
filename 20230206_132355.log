2023-02-06 13:23:55,906 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: /data/apps/cuda/11.1
NVCC: Cuda compilation tools, release 11.1, V11.1.74
GCC: gcc (GCC) 7.3.0
PyTorch: 1.10.0+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.0+cu111
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMClassification: 0.25.0+3d4f80d
------------------------------------------------------------

2023-02-06 13:23:55,907 - mmcls - INFO - Distributed training: False
2023-02-06 13:23:55,981 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(type='MobileNetV2', widen_factor=1.0),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=30,
        in_channels=1280,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, 5)))
load_from = '/HOME/scz0as3/run/mmclassification/checkpoints/mobilenet_v2_batch256_imagenet_20200708-3b2dc3af.pth'
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=2,
    train=dict(
        type='CustomDataset',
        data_prefix='data/fruit30_split/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224, backend='pillow'),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='CustomDataset',
        data_prefix='data/fruit30_split/val',
        ann_file=None,
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1), backend='pillow'),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='CustomDataset',
        data_prefix='data/fruit30_split/val',
        ann_file=None,
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1), backend='pillow'),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
optimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=4e-05)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', gamma=0.5, step=1)
runner = dict(type='EpochBasedRunner', max_epochs=5)
checkpoint_config = dict(interval=5)
log_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
resume_from = None
workflow = [('train', 1)]
work_dir = 'work/fruit'
gpu_ids = [0]

2023-02-06 13:23:55,983 - mmcls - INFO - Set random seed to 213455057, deterministic: False
2023-02-06 13:23:56,078 - mmcls - INFO - initialize MobileNetV2 with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-06 13:23:56,109 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.conv.weight - torch.Size([32, 3, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.conv1.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.conv1.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv.0.conv.weight - torch.Size([32, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.conv.0.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv.0.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv.1.conv.weight - torch.Size([16, 32, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.conv.1.bn.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv.1.bn.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv.0.conv.weight - torch.Size([96, 16, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.conv.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv.1.conv.weight - torch.Size([96, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.conv.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv.2.conv.weight - torch.Size([24, 96, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.conv.2.bn.weight - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv.2.bn.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv.0.conv.weight - torch.Size([144, 24, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.conv.0.bn.weight - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv.0.bn.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv.1.conv.weight - torch.Size([144, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.conv.1.bn.weight - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv.1.bn.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv.2.conv.weight - torch.Size([24, 144, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.conv.2.bn.weight - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv.2.bn.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv.0.conv.weight - torch.Size([144, 24, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.conv.0.bn.weight - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv.0.bn.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv.1.conv.weight - torch.Size([144, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.conv.1.bn.weight - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv.1.bn.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv.2.conv.weight - torch.Size([32, 144, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.conv.2.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv.2.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv.0.conv.weight - torch.Size([192, 32, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.conv.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv.1.conv.weight - torch.Size([192, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.conv.1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv.1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv.2.conv.weight - torch.Size([32, 192, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.conv.2.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv.2.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv.0.conv.weight - torch.Size([192, 32, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.conv.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv.1.conv.weight - torch.Size([192, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.conv.1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv.1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv.2.conv.weight - torch.Size([32, 192, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.conv.2.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv.2.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv.0.conv.weight - torch.Size([192, 32, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.conv.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv.1.conv.weight - torch.Size([192, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.conv.1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv.1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv.2.conv.weight - torch.Size([64, 192, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.conv.2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv.2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv.0.conv.weight - torch.Size([384, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.conv.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv.1.conv.weight - torch.Size([384, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.conv.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv.2.conv.weight - torch.Size([64, 384, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.conv.2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv.2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv.0.conv.weight - torch.Size([384, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.conv.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv.1.conv.weight - torch.Size([384, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.conv.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv.2.conv.weight - torch.Size([64, 384, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.conv.2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv.2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.3.conv.0.conv.weight - torch.Size([384, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.3.conv.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.3.conv.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.3.conv.1.conv.weight - torch.Size([384, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.3.conv.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.3.conv.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.3.conv.2.conv.weight - torch.Size([64, 384, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.3.conv.2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.3.conv.2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.0.conv.0.conv.weight - torch.Size([384, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.0.conv.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.0.conv.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.0.conv.1.conv.weight - torch.Size([384, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.0.conv.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.0.conv.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.0.conv.2.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.0.conv.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.0.conv.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.1.conv.0.conv.weight - torch.Size([576, 96, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.1.conv.0.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.1.conv.0.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.1.conv.1.conv.weight - torch.Size([576, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.1.conv.1.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.1.conv.1.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.1.conv.2.conv.weight - torch.Size([96, 576, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.1.conv.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.1.conv.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.2.conv.0.conv.weight - torch.Size([576, 96, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.2.conv.0.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.2.conv.0.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.2.conv.1.conv.weight - torch.Size([576, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.2.conv.1.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.2.conv.1.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.2.conv.2.conv.weight - torch.Size([96, 576, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.2.conv.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.2.conv.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.0.conv.0.conv.weight - torch.Size([576, 96, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.0.conv.0.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.0.conv.0.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.0.conv.1.conv.weight - torch.Size([576, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.0.conv.1.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.0.conv.1.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.0.conv.2.conv.weight - torch.Size([160, 576, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.0.conv.2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.0.conv.2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.1.conv.0.conv.weight - torch.Size([960, 160, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.1.conv.0.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.1.conv.0.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.1.conv.1.conv.weight - torch.Size([960, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.1.conv.1.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.1.conv.1.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.1.conv.2.conv.weight - torch.Size([160, 960, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.1.conv.2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.1.conv.2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.2.conv.0.conv.weight - torch.Size([960, 160, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.2.conv.0.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.2.conv.0.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.2.conv.1.conv.weight - torch.Size([960, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.2.conv.1.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.2.conv.1.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.2.conv.2.conv.weight - torch.Size([160, 960, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.2.conv.2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.2.conv.2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.0.conv.0.conv.weight - torch.Size([960, 160, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer7.0.conv.0.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.0.conv.0.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.0.conv.1.conv.weight - torch.Size([960, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer7.0.conv.1.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.0.conv.1.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.0.conv.2.conv.weight - torch.Size([320, 960, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer7.0.conv.2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.0.conv.2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.conv2.conv.weight - torch.Size([1280, 320, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.conv2.bn.weight - torch.Size([1280]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.conv2.bn.bias - torch.Size([1280]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([30, 1280]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([30]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-06 13:24:01,303 - mmcls - INFO - load checkpoint from local path: /HOME/scz0as3/run/mmclassification/checkpoints/mobilenet_v2_batch256_imagenet_20200708-3b2dc3af.pth
2023-02-06 13:24:01,403 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 1280]) from checkpoint, the shape in current model is torch.Size([30, 1280]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([30]).
2023-02-06 13:24:01,403 - mmcls - INFO - Start running, host: scz0as3@g0097, work_dir: /data/run01/scz0as3/mmclassification/work/fruit
2023-02-06 13:24:01,403 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-06 13:24:01,403 - mmcls - INFO - workflow: [('train', 1)], max: 5 epochs
2023-02-06 13:24:01,403 - mmcls - INFO - Checkpoints will be saved to /data/run01/scz0as3/mmclassification/work/fruit by HardDiskBackend.
2023-02-06 13:24:13,917 - mmcls - INFO - Epoch [1][10/137]	lr: 5.000e-03, eta: 0:14:03, time: 1.250, data_time: 0.922, memory: 2455, loss: 3.2477
2023-02-06 13:24:15,155 - mmcls - INFO - Epoch [1][20/137]	lr: 5.000e-03, eta: 0:07:36, time: 0.124, data_time: 0.096, memory: 2455, loss: 2.4555
2023-02-06 13:24:16,440 - mmcls - INFO - Epoch [1][30/137]	lr: 5.000e-03, eta: 0:05:27, time: 0.128, data_time: 0.095, memory: 2455, loss: 1.7093
2023-02-06 13:24:17,678 - mmcls - INFO - Epoch [1][40/137]	lr: 5.000e-03, eta: 0:04:22, time: 0.124, data_time: 0.092, memory: 2455, loss: 1.2739
2023-02-06 13:24:18,910 - mmcls - INFO - Epoch [1][50/137]	lr: 5.000e-03, eta: 0:03:42, time: 0.123, data_time: 0.094, memory: 2455, loss: 1.1950
2023-02-06 13:24:20,149 - mmcls - INFO - Epoch [1][60/137]	lr: 5.000e-03, eta: 0:03:15, time: 0.124, data_time: 0.093, memory: 2455, loss: 1.0462
2023-02-06 13:24:21,443 - mmcls - INFO - Epoch [1][70/137]	lr: 5.000e-03, eta: 0:02:55, time: 0.129, data_time: 0.098, memory: 2455, loss: 1.1100
2023-02-06 13:24:22,723 - mmcls - INFO - Epoch [1][80/137]	lr: 5.000e-03, eta: 0:02:41, time: 0.128, data_time: 0.096, memory: 2455, loss: 0.8087
2023-02-06 13:24:23,999 - mmcls - INFO - Epoch [1][90/137]	lr: 5.000e-03, eta: 0:02:29, time: 0.128, data_time: 0.095, memory: 2455, loss: 0.9063
2023-02-06 13:24:25,254 - mmcls - INFO - Epoch [1][100/137]	lr: 5.000e-03, eta: 0:02:19, time: 0.125, data_time: 0.094, memory: 2455, loss: 0.8970
2023-02-06 13:24:26,486 - mmcls - INFO - Epoch [1][110/137]	lr: 5.000e-03, eta: 0:02:11, time: 0.123, data_time: 0.091, memory: 2455, loss: 0.9393
2023-02-06 13:24:27,757 - mmcls - INFO - Epoch [1][120/137]	lr: 5.000e-03, eta: 0:02:04, time: 0.127, data_time: 0.095, memory: 2455, loss: 0.9038
2023-02-06 13:24:28,952 - mmcls - INFO - Epoch [1][130/137]	lr: 5.000e-03, eta: 0:01:57, time: 0.119, data_time: 0.087, memory: 2455, loss: 0.9386
2023-02-06 13:24:34,117 - mmcls - INFO - Epoch(val) [1][34]	accuracy_top-1: 75.4174, accuracy_top-5: 95.6401
2023-02-06 13:24:37,274 - mmcls - INFO - Epoch [2][10/137]	lr: 2.500e-03, eta: 0:01:52, time: 0.314, data_time: 0.281, memory: 2455, loss: 0.6932
2023-02-06 13:24:38,353 - mmcls - INFO - Epoch [2][20/137]	lr: 2.500e-03, eta: 0:01:46, time: 0.108, data_time: 0.074, memory: 2455, loss: 0.6274
2023-02-06 13:24:39,358 - mmcls - INFO - Epoch [2][30/137]	lr: 2.500e-03, eta: 0:01:41, time: 0.101, data_time: 0.067, memory: 2455, loss: 0.5168
2023-02-06 13:24:40,344 - mmcls - INFO - Epoch [2][40/137]	lr: 2.500e-03, eta: 0:01:36, time: 0.099, data_time: 0.065, memory: 2455, loss: 0.5174
2023-02-06 13:24:41,376 - mmcls - INFO - Epoch [2][50/137]	lr: 2.500e-03, eta: 0:01:32, time: 0.103, data_time: 0.073, memory: 2455, loss: 0.5321
2023-02-06 13:24:42,442 - mmcls - INFO - Epoch [2][60/137]	lr: 2.500e-03, eta: 0:01:28, time: 0.107, data_time: 0.077, memory: 2455, loss: 0.5083
2023-02-06 13:24:43,438 - mmcls - INFO - Epoch [2][70/137]	lr: 2.500e-03, eta: 0:01:25, time: 0.100, data_time: 0.070, memory: 2455, loss: 0.6251
2023-02-06 13:24:44,519 - mmcls - INFO - Epoch [2][80/137]	lr: 2.500e-03, eta: 0:01:21, time: 0.108, data_time: 0.079, memory: 2455, loss: 0.5103
2023-02-06 13:24:45,536 - mmcls - INFO - Epoch [2][90/137]	lr: 2.500e-03, eta: 0:01:18, time: 0.102, data_time: 0.072, memory: 2455, loss: 0.5588
2023-02-06 13:24:46,575 - mmcls - INFO - Epoch [2][100/137]	lr: 2.500e-03, eta: 0:01:15, time: 0.104, data_time: 0.075, memory: 2455, loss: 0.5205
2023-02-06 13:24:47,622 - mmcls - INFO - Epoch [2][110/137]	lr: 2.500e-03, eta: 0:01:12, time: 0.105, data_time: 0.076, memory: 2455, loss: 0.5900
2023-02-06 13:24:48,686 - mmcls - INFO - Epoch [2][120/137]	lr: 2.500e-03, eta: 0:01:10, time: 0.106, data_time: 0.074, memory: 2455, loss: 0.5431
2023-02-06 13:24:49,686 - mmcls - INFO - Epoch [2][130/137]	lr: 2.500e-03, eta: 0:01:07, time: 0.100, data_time: 0.068, memory: 2455, loss: 0.5947
2023-02-06 13:24:53,604 - mmcls - INFO - Epoch(val) [2][34]	accuracy_top-1: 88.4044, accuracy_top-5: 98.5158
2023-02-06 13:24:56,713 - mmcls - INFO - Epoch [3][10/137]	lr: 1.250e-03, eta: 0:01:05, time: 0.310, data_time: 0.276, memory: 2455, loss: 0.3691
2023-02-06 13:24:57,759 - mmcls - INFO - Epoch [3][20/137]	lr: 1.250e-03, eta: 0:01:02, time: 0.105, data_time: 0.073, memory: 2455, loss: 0.3884
2023-02-06 13:24:58,760 - mmcls - INFO - Epoch [3][30/137]	lr: 1.250e-03, eta: 0:01:00, time: 0.100, data_time: 0.068, memory: 2455, loss: 0.3397
2023-02-06 13:24:59,855 - mmcls - INFO - Epoch [3][40/137]	lr: 1.250e-03, eta: 0:00:58, time: 0.110, data_time: 0.081, memory: 2455, loss: 0.4047
2023-02-06 13:25:00,895 - mmcls - INFO - Epoch [3][50/137]	lr: 1.250e-03, eta: 0:00:56, time: 0.104, data_time: 0.075, memory: 2455, loss: 0.4062
2023-02-06 13:25:01,919 - mmcls - INFO - Epoch [3][60/137]	lr: 1.250e-03, eta: 0:00:54, time: 0.103, data_time: 0.074, memory: 2455, loss: 0.4128
2023-02-06 13:25:02,976 - mmcls - INFO - Epoch [3][70/137]	lr: 1.250e-03, eta: 0:00:51, time: 0.106, data_time: 0.078, memory: 2455, loss: 0.2551
2023-02-06 13:25:04,010 - mmcls - INFO - Epoch [3][80/137]	lr: 1.250e-03, eta: 0:00:50, time: 0.103, data_time: 0.075, memory: 2455, loss: 0.3073
2023-02-06 13:25:05,078 - mmcls - INFO - Epoch [3][90/137]	lr: 1.250e-03, eta: 0:00:48, time: 0.107, data_time: 0.078, memory: 2455, loss: 0.3966
2023-02-06 13:25:06,113 - mmcls - INFO - Epoch [3][100/137]	lr: 1.250e-03, eta: 0:00:46, time: 0.103, data_time: 0.074, memory: 2455, loss: 0.4291
2023-02-06 13:25:07,192 - mmcls - INFO - Epoch [3][110/137]	lr: 1.250e-03, eta: 0:00:44, time: 0.108, data_time: 0.075, memory: 2455, loss: 0.3349
2023-02-06 13:25:08,190 - mmcls - INFO - Epoch [3][120/137]	lr: 1.250e-03, eta: 0:00:42, time: 0.100, data_time: 0.071, memory: 2455, loss: 0.3373
2023-02-06 13:25:09,273 - mmcls - INFO - Epoch [3][130/137]	lr: 1.250e-03, eta: 0:00:40, time: 0.108, data_time: 0.079, memory: 2455, loss: 0.4067
2023-02-06 13:25:13,155 - mmcls - INFO - Epoch(val) [3][34]	accuracy_top-1: 91.5584, accuracy_top-5: 98.7013
2023-02-06 13:25:16,260 - mmcls - INFO - Epoch [4][10/137]	lr: 6.250e-04, eta: 0:00:38, time: 0.309, data_time: 0.276, memory: 2455, loss: 0.3478
2023-02-06 13:25:17,250 - mmcls - INFO - Epoch [4][20/137]	lr: 6.250e-04, eta: 0:00:37, time: 0.099, data_time: 0.068, memory: 2455, loss: 0.3492
2023-02-06 13:25:18,322 - mmcls - INFO - Epoch [4][30/137]	lr: 6.250e-04, eta: 0:00:35, time: 0.107, data_time: 0.075, memory: 2455, loss: 0.3627
2023-02-06 13:25:19,348 - mmcls - INFO - Epoch [4][40/137]	lr: 6.250e-04, eta: 0:00:33, time: 0.103, data_time: 0.071, memory: 2455, loss: 0.2903
2023-02-06 13:25:20,416 - mmcls - INFO - Epoch [4][50/137]	lr: 6.250e-04, eta: 0:00:32, time: 0.107, data_time: 0.076, memory: 2455, loss: 0.2844
2023-02-06 13:25:21,469 - mmcls - INFO - Epoch [4][60/137]	lr: 6.250e-04, eta: 0:00:30, time: 0.105, data_time: 0.073, memory: 2455, loss: 0.3031
2023-02-06 13:25:22,514 - mmcls - INFO - Epoch [4][70/137]	lr: 6.250e-04, eta: 0:00:28, time: 0.104, data_time: 0.071, memory: 2455, loss: 0.3140
2023-02-06 13:25:23,577 - mmcls - INFO - Epoch [4][80/137]	lr: 6.250e-04, eta: 0:00:27, time: 0.106, data_time: 0.075, memory: 2455, loss: 0.3408
2023-02-06 13:25:24,641 - mmcls - INFO - Epoch [4][90/137]	lr: 6.250e-04, eta: 0:00:25, time: 0.106, data_time: 0.078, memory: 2455, loss: 0.2988
2023-02-06 13:25:25,678 - mmcls - INFO - Epoch [4][100/137]	lr: 6.250e-04, eta: 0:00:24, time: 0.104, data_time: 0.073, memory: 2455, loss: 0.2921
2023-02-06 13:25:26,755 - mmcls - INFO - Epoch [4][110/137]	lr: 6.250e-04, eta: 0:00:22, time: 0.108, data_time: 0.075, memory: 2455, loss: 0.3347
2023-02-06 13:25:27,847 - mmcls - INFO - Epoch [4][120/137]	lr: 6.250e-04, eta: 0:00:21, time: 0.109, data_time: 0.077, memory: 2455, loss: 0.2675
2023-02-06 13:25:28,899 - mmcls - INFO - Epoch [4][130/137]	lr: 6.250e-04, eta: 0:00:19, time: 0.105, data_time: 0.073, memory: 2455, loss: 0.3728
2023-02-06 13:25:32,762 - mmcls - INFO - Epoch(val) [4][34]	accuracy_top-1: 92.1150, accuracy_top-5: 98.9796
2023-02-06 13:25:35,883 - mmcls - INFO - Epoch [5][10/137]	lr: 3.125e-04, eta: 0:00:17, time: 0.311, data_time: 0.282, memory: 2455, loss: 0.3178
2023-02-06 13:25:36,901 - mmcls - INFO - Epoch [5][20/137]	lr: 3.125e-04, eta: 0:00:16, time: 0.102, data_time: 0.071, memory: 2455, loss: 0.2766
2023-02-06 13:25:37,976 - mmcls - INFO - Epoch [5][30/137]	lr: 3.125e-04, eta: 0:00:14, time: 0.107, data_time: 0.079, memory: 2455, loss: 0.2533
2023-02-06 13:25:39,004 - mmcls - INFO - Epoch [5][40/137]	lr: 3.125e-04, eta: 0:00:13, time: 0.103, data_time: 0.074, memory: 2455, loss: 0.3610
2023-02-06 13:25:40,026 - mmcls - INFO - Epoch [5][50/137]	lr: 3.125e-04, eta: 0:00:11, time: 0.102, data_time: 0.073, memory: 2455, loss: 0.2581
2023-02-06 13:25:41,107 - mmcls - INFO - Epoch [5][60/137]	lr: 3.125e-04, eta: 0:00:10, time: 0.108, data_time: 0.080, memory: 2455, loss: 0.2577
2023-02-06 13:25:42,182 - mmcls - INFO - Epoch [5][70/137]	lr: 3.125e-04, eta: 0:00:09, time: 0.108, data_time: 0.077, memory: 2455, loss: 0.2970
2023-02-06 13:25:43,238 - mmcls - INFO - Epoch [5][80/137]	lr: 3.125e-04, eta: 0:00:07, time: 0.105, data_time: 0.074, memory: 2455, loss: 0.2956
2023-02-06 13:25:44,293 - mmcls - INFO - Epoch [5][90/137]	lr: 3.125e-04, eta: 0:00:06, time: 0.106, data_time: 0.075, memory: 2455, loss: 0.2458
2023-02-06 13:25:45,370 - mmcls - INFO - Epoch [5][100/137]	lr: 3.125e-04, eta: 0:00:04, time: 0.108, data_time: 0.076, memory: 2455, loss: 0.2729
2023-02-06 13:25:46,414 - mmcls - INFO - Epoch [5][110/137]	lr: 3.125e-04, eta: 0:00:03, time: 0.104, data_time: 0.072, memory: 2455, loss: 0.3377
2023-02-06 13:25:47,420 - mmcls - INFO - Epoch [5][120/137]	lr: 3.125e-04, eta: 0:00:02, time: 0.101, data_time: 0.070, memory: 2455, loss: 0.2376
2023-02-06 13:25:48,451 - mmcls - INFO - Epoch [5][130/137]	lr: 3.125e-04, eta: 0:00:00, time: 0.103, data_time: 0.075, memory: 2455, loss: 0.2940
2023-02-06 13:25:49,084 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-06 13:25:52,374 - mmcls - INFO - Epoch(val) [5][34]	accuracy_top-1: 92.6716, accuracy_top-5: 98.9796
